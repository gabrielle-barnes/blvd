blvd {
  Script        = Prologue Act+ Epilogue
  Prologue      = prologue nl Direction+ endPrologue nl nl
  Act           = act digit+ nl Direction+ endAct nl nl
  Epilogue      = epilogue nl Direction+ endEpilogue nl
  Direction     = DialogueLine 
                | CastLine
                | "\n"                                      --freeze
  DialogueLine  = PrintStmt | ForStmt | IfStmt | WhileStmt | ReturnStmt | CreateObject 
  CastLine      = CastDecl | RecastDecl | FuncDecl | ClassDecl
  
  // STATEMENTS
  PrintStmt     = print Exp dd nl 
  
  ForStmt       = for Type id in RangeFunc ":" nl Block
  
  IfStmt        = if Exp ":" nl Block ElseIf* Else?                   
  ElseIf        = elseif Exp ":" nl Block 
  Else          = else ":" nl Block 
    
  WhileStmt     = while Exp ":" nl Block
    
  Block         = Direction*                  
  
  ReturnStmt    = return Exp dd nl
  
  // CASTING
  CastDecl      = cast Type id as Exp dd nl
  RecastDecl    = recast id as Exp dd nl

  FuncDecl      = nl? function Type id has Params ":" "\n" Block endFunction nl 
  ClassDecl     = class id ":" nl Member* nl? endClass nl 
  Member        = Field | Constructor | CastDecl | FuncDecl
  Field         = Type id dd nl
  
  // CONSTRUCTOR
  Constructor   = nl? ctor has Params ":" nl CtorBody endCtor nl
  CtorBody      = (id MemberExp as id dd nl)*
  MemberExp     = given  
  
  CreateObject  = cast Type id as id "(" ListOf<Exp, ","> ")" dd nl
  Call          = id "." id "(" ListOf<Exp, ","> ")" 

  Params        = ListOf<Param, ","> ","?
  Param         = Type id
  
  // EXTRA FUNCTIONS
  RangeFunc     = range from Exp "," Exp

  // EXPRESSIONS
  Exp           = Exp "or" Exp1                             --booleanOr
                | Exp1	
  Exp1          = Exp1 "and" Exp2                           --booleanAnd	           
                | Exp2
  Exp2          = Exp3 relop Exp3                           --relationOps    
                | Exp3
  Exp3          = Exp3 ("+" | ~dd "-") Exp4                 --addSub
                | Exp4
  Exp4          = Exp4 ("*" | "/" | "%") Exp5               --multDivMod
                | Exp5 
  Exp5          = Exp6 "**" Exp5                            --exponent
                | Exp6
  Exp6          = "(" Exp ")"                               --parens
                | "["ListOf<Exp, ","> "]"                   --listexp
                | message                                   
                | (true | false)
                | Call 
                | id              --id
                | num
  
  // TYPES
  Type          = (string | number | boolean) list?
  
  // KEYWORDS
  print         = "say" ~idchar
  string        = "string" ~idchar
  number        = "number" ~idchar
  boolean       = "boolean" ~idchar
  list          = "list" ~idchar
  true          = "true" ~idchar
  false         = "false" ~idchar
  equalSign     = "as" ~idchar
  has           = "has" ~idchar
  is            = "is" ~idchar
  range         = "range" ~idchar
  from          = "from" ~idchar
  in            = "in" ~idchar
  ctor          = "CONSTRUCTOR" ~idchar
  endCtor       = "END CONSTRUCTOR" ~idchar
  given         = "GIVEN" ~idchar
  assign        = "cast" ~idchar
  append        = "APPEND" ~idchar
  for           = "ACTION" ~idchar 
  while         = "PERFORM" ~idchar
  if            = "NOMINATE" ~idchar
  elseif        = "RUNNER-UP" ~idchar
  else          = "SUPPORTING" ~idchar
  function      = "SCENE" ~idchar
  endFunction   = "END SCENE" ~idchar
  method        = "SCENE" ~idchar
  endMethod     = "END SCENE" ~idchar
  class         = "STAGE" ~idchar
  endClass      = "EXIT STAGE" ~idchar
  prologue      = "PROLOGUE" ~idchar
  endPrologue   = "END OF PROLOGUE" ~idchar
  act           = "ACT" ~idchar
  endAct        = "END OF ACT" ~idchar
  epilogue      = "EPILOGUE" ~idchar
  endEpilogue   = "FIN" ~idchar
  return        = "EXIT WITH" ~idchar
  cast          = "CAST" ~idchar
  as            = "as" ~idchar
  recast        = "RECAST" ~idchar

  keywords      = print | string | number | boolean | list | true | false 
                | equalSign | has | is | range | from | in | ctor | given 
                | assign | append | function | endFunction | method 
                | endMethod | for | while | if | elseif | else | class 
                | endClass | return | prologue | endPrologue | act | endAct 
                | cast | as | recast
                
  // COMMENTS			
  comment       = "(note:" (~")" any)* ")" nl
  message       = q (~dd ~q any)* q
  
  // IDâ€™s, NUM, RELOP
  id            = ~keywords letter idchar*
  idchar        = alnum | "_"
  num           = digit* ("." digit+)? (("e" | "E") ("+" | "-")? digit digit? digit?)?
  relop         = "<=" | "<" | ">=" | ">" | "==" | "!=" | "is"

  // LIL CHARACTERS
  space         := " " | "\t" | "\r" | comment
  nl            = "\n" | end
  q             = "\""
  dd            = "--"
}